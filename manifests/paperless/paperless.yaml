apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: paperless-secrets
  namespace: convenience
spec:
  encryptedData:
    PAPERLESS_ADMIN_PASSWORD: AgB8XcLyZ6ba2ih3fMBj4ycNtl1VrGsb88Z21qv4FstTxbX3SuSZKH+ugiKNmurqz7c+EniWtvqhqPCXp3i3iMJWt4WDlQJbU7q6j2JC9kiI1njwYlzuidSgz2Rh8tBBqHccAO1O3a7EyZViWxNZLIjQubKzDh4VMnjdO91M2Y7hXnwAiGorcEEI7J+ufIAHnrKYIyXHwS78uPiplv8hl0w0XTPq5RH+XkWuTmo0DHB4nAcMDqx3IL0LScQYpWy7VYRYjcwfBaePS6qg8LZTSrmgvPfX7mBicDtnS+DzCqoYiAD5iu1nN7JqdpvbSt/0mfN7SeqdgvmMEfKXUfxoE5qb/GnTUkjGBz250/G3e492s8ZF5ya86mOvtgUEB8ZRI6D+eSJbA8nH0lx68I9jleqvRZUTwc5nh9VT1oJhLPhwv8rZZLRcC6XGsiOlSz/QbKrFrH1lp7KmvcpDkw4tl2vTyMKrBSCF3T4FSLmUccVnE6pf4+yQh9+IuiRctco/j5r99TrpYZ/GT/b5act8R9RcFdmdV37GnHwJWoXc8KkbvqL1gWSTa6GkBXffgAjgsCOO46YsTqZY/AAtTQoDX6xKPUIZJOy5WvqvbBe6IchMYmWCPpWBNZzlc8hpyrMe/pHkjKL92a3nUPyz8VTK3CLWXsRUUXHQbhoEo5UkpsSwFM5pgfwha0E8zp457aycgGAwXgPBjjo6I9A=
    PAPERLESS_ADMIN_USER: AgAdLOZnIH1XH/utD5taZBcFygEAQP9kpWrMVLMPgyeoe1JBjROqFiTJ++zvgPndk579mUQNi3P8SPQTcdXNlRjalm+fGPPkcnXR/JWjCgChRQFZwfvyrVwez7u3+kesBrBMq5H0Ne5J0cMVku91lezaaTEZj9XV20Y0liRNlfrUZy/yojT8jAFzxvhTFhj6b/z+3FbxqlE3vrJHpdGBRaqaaO+j9ZveTJqHBTlrY/CEdAe0mRDrhpAVHkPFrjmOxOoOXuYBfy2IPQOUSzQjiTTjVCxd1cUOzgYlaWeGpHTp9V7ZIXSMQ094PhRl4cDFD2w0GzD0VNKFwZQ7wGAtgthGzpTzhpO9rv4QztMUBqJYlxtS3LRtGGqc7uUDaIYJiNDbA/5QQw8zRauq/U7MljbxpCLdxEBuIaaG7ic7ftAPHxRCx3eJwq8H65FK6+hDBEGqoyMTiwlfoFZXv2HbxGVeQcMlEPrmt27Ik4r8Pv5n3dd7oHcJoUoRbO+K93DrCQCpNn90jM5i6Kyp1gfvBVMI3r1E2NakitDQJQDquMNVF5igVPEq/bYuZgR6VNqB6++qDHk1lGn/WrgszKBjxvUQ+vzev7LxHw/crqN2AByQmGnkcd836Z06w7u815FFZdaYzmlQmFzazZGRqvGrt96iu5PEd05DsykjGDTEEf91IPejdGwZfuta8zfGQB1XYrb47nn0IA==
    PAPERLESS_SECRET_KEY: AgBOGxxMenAECEYvv0xMETzZe/F+kX1fGz3D3uxuLSgIqkc4iniTc60WrkwEpmvvH+SrWuZoQmQ4dLx5IKnb8Lr+l6FusmTtQcv4AOf9RmAWD2zmxgTZQ/o6MsXgQVeavAT4iAysgMTrFGfDpoKzpJXGOc2OzuHHg2chQ31KAvYy0a77I6hSdxc+aQL+uN5Z1kWAf1mVa2vk8671E6PV6wmNoiAzx2MfdsfS3hxrSW1HNIlnff5flzTg+WPEkaXJBsIBhpx5aAlV6YNy/LAnPn9w9txsY7giIONXzBnjoSLDMhG1sWbQ0vKHmRapVaS9U5EtqqcfMaFCJt6sUud+SnkaJWJfQUldPGr7nMbJsk3rD2GUOjCUZV08q0nLckE0XcxusxLOWATjLEjlwN/0UA+6UewuEl2LFGrlW3x0aqqW8VMRpPk6NC9lEEJXh8OTYTI68yoI4x06mKiCS/3KfCobvhYUEht70VgX6OK+3z5Ez4vZY8AHnVWC0LLmr6W8sz4ZTgAr8Ys8C0hEXnxrq1IN+Q5VQJT/FqlKHmwsZ4Un6kIF+zsmneIdfpvIzuSt9mrAXMS+e6FZqcu4B7GkLFpDzR1U6hEJmwd8vCzoPEfWSui5r2YMMyHiXKh7ZEUUOh+oqeIlN6XBc853j/GRSE/EFx5URMEvdlNzTugY55tX9Um2GyBm1o0M0sAjrwLTsKJ72U/BmLX6oMSl
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: paperless
        name: paperless
      name: paperless-secrets
      namespace: convenience
    type: Opaque
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: redis-paperless
  namespace: databases
spec:
  encryptedData:
    redis-password: AgAl8VX6Q0AwOCvhjulz+Ox/pslPjO9KjME//vzaSMnWDEWtJURt9ASXl7NPCujOK3AlaBuQ15FS/nPpgchd7uvl35uL1uFFW5kAWvRWnhVzce/2nrthkzqYf+vGbKRrKv9uQu4pVzsdY+mnUxNtLhJZ1tPQZtp7N/y0md1N5VnP2X9aok5JfZGYfyq3UbC8xibBDYuVYvi8RhUNFL4GJIhBB9NFFeQyxmrEXVMQ6xU+oI4k8Kn0Y1ETKC4dkOrD8TkpV0x91s5z4QxwNhM2pxwUDTvlRNmjxXNFWjZSNfP+guV7exDmyjb+iAcL2gmeCgjeN/Bh2odrZRLXOND9AMI8/Y6+XHOIVIOghA0R4fJjHygXK08Eu0T8X04Dw4iEb3zUtMULTJ66JwwWHCUup+7/iXJJNmp/jugbmZQe+FAX9bvPjx3e4XxbzkeA/9Ry2AXYhO6Qsz7rK+f/odSyHKE60DYwQwKM5JZAGVxJfpdGLnjXi7rhD8LUU4CF+sGoAAnBaRz8dR7oqnSOQVjjUbKvHFXjO7T3jjg1/ImZx2NyNi3+a3i2/3B3GlgOUFPnPBzwbvbQkHPakElIWdR7aXPMu8himog7HBaHkqdJEDk52z5KtnGpgpj1xHT6s6Ze9dc6xwVguEzkj+ZpA5LzIbK1cImUCrRMZ0NGojAanJNjerIN6z6ZiRy7bWtXbBr2em0ImR9ADqZ+zGyB
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: redis-paperless
        app.kubernetes.io/name: redis-paperless
      name: redis-paperless
      namespace: databases
    type: Opaque
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: paperless-config-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: longhorn
  csi:
    driver: driver.longhorn.io
    volumeHandle: paperless-config   
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: paperless-config-pvc
  namespace: convenience
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: longhorn
  volumeName: paperless-config-pv
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: paperless-shared-pv
spec:
  capacity:
    storage: 1000Gi
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  nfs:
    path: /volume1/Documents
    server: 192.168.50.50
  storageClassName: nfs      
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: paperless-shared-pvc
  namespace: convenience
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1000Gi
  storageClassName: nfs
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-paperless-master-pv
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: longhorn
  csi:
    driver: driver.longhorn.io
    volumeHandle: redis-paperless-master
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-paperless-master-pvc
  namespace: databases
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeName: redis-paperless-master-pv
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-paperless-replica-pv
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: longhorn
  csi:
    driver: driver.longhorn.io
    volumeHandle: redis-paperless-replica
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-paperless-replica-pvc
  namespace: databases
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeName: redis-paperless-replica-pv
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: paperless
  namespace: convenience
  labels:
    name: paperless
rules:
  - apiGroups: ['']
    verbs: ['list']
    resources:
      - pods
  - apiGroups: ['apps']
    verbs: ['get']
    resources:
      - deployments
  - apiGroups: ['']
    verbs: ['create']
    resources:
      - pods/exec
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: paperless
  namespace: convenience
  labels:
    name: paperless
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: paperless
subjects:
  - kind: ServiceAccount
    name: default
    namespace: convenience
---
apiVersion: v1
kind: Service
metadata:
  name: paperless
  namespace: convenience
  labels:
    name: paperless
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8000
      targetPort: http
      protocol: "TCP"
  selector:
    name: paperless
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: paperless
  namespace: convenience
  labels:
    name: paperless
spec:
  serviceName: paperless
  replicas: 1
  selector:
    matchLabels:
      name: paperless
  template:
    metadata:
      labels:
        name: paperless
    spec:
      serviceAccountName: default
      containers:
        - name: paperless
          image: paperlessngx/paperless-ngx:2.2
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: "700m"
              memory: "768Mi"
            requests:
              cpu: "300m"
              memory: "512Mi"
          ports:
            - name: http
              containerPort: 8000
              protocol: "TCP"
          env:
            - name: "TZ"
              value: "America/Toronto"
            - name: PAPERLESS_TIME_ZONE
              value: "America/Toronto"
            - name: PAPERLESS_CONSUMPTION_DIR
              value: /consumption
            - name: PAPERLESS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: paperless-secrets
                  key: PAPERLESS_SECRET_KEY
            - name: PAPERLESS_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: paperless-secrets
                  key: PAPERLESS_ADMIN_USER
            - name: PAPERLESS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: paperless-secrets
                  key: PAPERLESS_ADMIN_PASSWORD
            - name: PAPERLESS_AUTO_LOGIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: paperless-secrets
                  key: PAPERLESS_ADMIN_USER                  
            - name: PAPERLESS_REDIS
              value: redis://redis-paperless-master.databases.svc.cluster.local:6379
            - name: PAPERLESS_EMAIL_TASK_CRON
              value: '*/1 * * * *'
            - name: PAPERLESS_ENABLE_HTTP_REMOTE_USER
              value: 'True'
            - name: PAPERLESS_HTTP_REMOTE_USER_HEADER_NAME
              value: HTTP_X_FORWARDED_USER
            - name: PAPERLESS_ALLOWED_HOSTS
              value: '*'
            - name: PAPERLESS_CSRF_TRUSTED_ORIGINS
              value: https://paperless.104-400mvb.ca
            - name: PAPERLESS_CORS_TRUSTED_ORIGINS
              value: https://paperless.104-400mvb.ca
            - name: PAPERLESS_PORT
              value: "8000"
          volumeMounts:
            - name: storage-config
              mountPath: /usr/src/paperless/data
              subPath: data
            - name: storage-volume
              mountPath: /usr/src/paperless/media
              subPath: media
            - name: consumption-volume
              mountPath: /consumption
            - name: export-volume
              mountPath: /export
          startupProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
      volumes:
        - name: storage-config
          persistentVolumeClaim:
            claimName: paperless-config-pvc           
        - name: storage-volume
          persistentVolumeClaim:
            claimName: paperless-shared-pvc            
        - name: consumption-volume
          emptyDir: {} 
        - name: export-volume
          emptyDir: {}


## REDIS CONFIGURATION ##
---
# Source: redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: redis-paperless
  namespace: "databases"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: redis-paperless
    app.kubernetes.io/managed-by: Helm
---
# Source: redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-paperless-configuration
  namespace: "databases"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: redis-paperless
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    requirepass ""
    protected-mode no
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-paperless-health
  namespace: "databases"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: redis-paperless
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-paperless-scripts
  namespace: "databases"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: redis-paperless
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-paperless-headless
  namespace: "databases"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: redis-paperless
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: redis-paperless
---
# Source: redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-paperless-master
  namespace: "databases"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: redis-paperless
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: redis-paperless
    app.kubernetes.io/component: master
---
# Source: redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-paperless-replicas
  namespace: "databases"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: redis-paperless
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: redis-paperless
    app.kubernetes.io/component: replica
---
# Source: redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-paperless-master
  namespace: "databases"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: redis-paperless
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: redis-paperless
      app.kubernetes.io/component: master
  serviceName: redis-paperless-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.10.1
        app.kubernetes.io/instance: redis-paperless
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: ca27d0ff6d81ca45aa8b882c78985e29615b741128bf9bdd6765556d2f2029c6
        checksum/health: 31edc5f2228e3a3896052bd1c182f38609f2346da136a32472a8f0502ad1f2d2
        checksum/scripts: fe1c246d7287701670f37150b01a68b82381e14eaeb737924e3f0f233e3877b3
        checksum/secret: 00c96c58e21080263db275729098802fe2d3b946672ca358748b8dfb19b5f898
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: redis-paperless
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: redis-paperless
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.3-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-paperless
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: "200m"
              memory: "256Mi"
            requests:
              cpu: "50m"
              memory: "64Mi"
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: redis-paperless-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: redis-paperless-health
            defaultMode: 0755
        - name: config
          configMap:
            name: redis-paperless-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-paperless-master-pvc
---
# Source: redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-paperless-replicas
  namespace: "databases"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: redis-paperless
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: redis-paperless
      app.kubernetes.io/component: replica
  serviceName: redis-paperless-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.10.1
        app.kubernetes.io/instance: redis-paperless
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: ca27d0ff6d81ca45aa8b882c78985e29615b741128bf9bdd6765556d2f2029c6
        checksum/health: 31edc5f2228e3a3896052bd1c182f38609f2346da136a32472a8f0502ad1f2d2
        checksum/scripts: fe1c246d7287701670f37150b01a68b82381e14eaeb737924e3f0f233e3877b3
        checksum/secret: f1782496e3ec32fb48282457b974b2ad5069139cb40f342d4c51771692f6ba08
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: redis-paperless
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: redis-paperless
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.3-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: redis-paperless-master.databases.svc.cluster.local #redis-paperless-master-0.redis-paperless-headless.databases.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-paperless
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-paperless
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits:
              cpu: "200m"
              memory: "256Mi"
            requests:
              cpu: "50m"
              memory: "64Mi"
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: redis-paperless-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: redis-paperless-health
            defaultMode: 0755
        - name: config
          configMap:
            name: redis-paperless-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-paperless-replica-pvc
