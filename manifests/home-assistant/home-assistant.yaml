---
apiVersion: v1
kind: PersistentVolume
metadata: 
  name: home-assistant-config
  labels:
    argocd.argoproj.io/instance: home-assistant  
spec: 
  capacity: 
    storage: 5Gi
  accessModes: 
    - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: longhorn
  csi:
    driver: driver.longhorn.io
    volumeHandle: home-assistant-config
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: automation
  name: home-assistant-config-pvc
  labels:
    argocd.argoproj.io/instance: home-assistant  
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeName: home-assistant-config
  storageClassName: longhorn 
---
apiVersion: v1
kind: Service
metadata:
  namespace: automation
  name: home-assistant
  labels:
    app.kubernetes.io/name: home-assistant
  annotations:
spec:
  type: LoadBalancer
  loadBalancerIP: 192.168.50.195
  ports:
  - port: 8443
    targetPort: 8443
    protocol: TCP
    name: https
  - port: 1984
    targetPort: 1984
    protocol: TCP
    name: go2rtc
  - port: 8555
    targetPort: 8555
    protocol: TCP
    name: webrtc
  selector:
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/instance: home-assistant
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
  generation: 13
  labels:
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/name: home-assistant
    argocd.argoproj.io/instance: home-assistant
  name: home-assistant
  namespace: automation
spec:
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: home-assistant
      app.kubernetes.io/name: home-assistant
  serviceName: home-assistant
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: home-assistant
        app.kubernetes.io/name: home-assistant
    spec:
      automountServiceAccountToken: true
      containers:
        - env:
            - name: TZ
              value: America/Toronto
            - name: PYTHONPATH
              value: '$PYTHONPATH:/config/deps'         
          image: 'homeassistant/home-assistant:2025.3.2'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 60
            httpGet:
              host: ha.104-400mvb.ca
              path: /
              port: 443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 25
          name: home-assistant
          ports:
            - containerPort: 8443
              name: https
              protocol: TCP
          readinessProbe:
            failureThreshold: 60
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            tcpSocket:
              port: 8443
            timeoutSeconds: 25
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
                - NET_BROADCAST
            privileged: true
          startupProbe:
            failureThreshold: 60
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            tcpSocket:
              port: 8443
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /etc/localtime
              name: localtime
              readOnly: true
        - command:
            - /bin/sh
            - '-c'
            - |
              apk add --no-cache mysql-client openssh
              echo "Starting MariaDB monitor sidecar..."
              mariadb_down=0
              while true; do
                # Check MariaDB readiness
                if mysqladmin ping -h 192.168.50.168:3306 --password=$MARIADB_ROOT_PASSWORD --silent; then
                  if [ "$mariadb_down" -eq 1 ]; then
                    echo "MariaDB has recovered. Restarting Home Assistant..."
                    # Restart Home Assistant StatefulSet via SSH
                    sshpass -p "SSHPASS" ssh -o StrictHostKeyChecking=no root@192.168.50.200 "kubectl rollout restart statefulset home-assistant -n automation"
                    mariadb_down=0  # Reset the flag
                  fi
                  echo "MariaDB is up and healthy."
                else
                  echo "MariaDB is down."
                  mariadb_down=1  # Set the flag to indicate MariaDB is down
                fi
                sleep 60  # Check MariaDB status every 60 seconds
              done
          env:
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mariadb-root-password
                  name: home-assistant
            - name: SSHPASS
              valueFrom:
                secretKeyRef:
                  key: sshpass
                  name: home-assistant                  
          image: 'alpine:latest'
          imagePullPolicy: Always
          name: sidecar-mariadb-monitor
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      initContainers:
        - args:
            - '--host="$(MARIADB_HOST)"'
            - '--verbose'
            - '--every=5s'
            - '--timeout=600s'
          env:
            - name: MARIADB_HOST
              value: '192.168.50.168:3306'
          image: 'ghcr.io/patrickdappollonio/wait-for:latest'
          imagePullPolicy: Always
          name: wait-for-db
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: home-assistant-config-pvc
        - hostPath:
            path: /etc/localtime
            type: ''
          name: localtime
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
