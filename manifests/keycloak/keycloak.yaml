apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloak
  namespace: "security"
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
automountServiceAccountToken: true
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: keycloak-postgresql
  namespace: security
spec:
  encryptedData:
    password: AgAf6XOT492PGjGPkdbHwaEgoqCGyENYtjm+uWAwI7iToyWSV44QzvxVLxSC244aUK4GnjzNrii8avc7xtG5f/bmfcxOg4Na54CZsBTRigmWug1TpVsCPTQLhd7yIzEtysyo/OyxbzI1OnnOKkkn2sUODV1NHmOyvEk06EZqi275TOjcqirVeI118PjX18GtxPZb7p0EL0Dd+/DwdJxf1l1VwoClbuPDAbZHkQ7slAaDwmhK8L87z8c63FbNZHYyXtDPHAg33Uhf/LOxG4K8g8/ngqt2DxIYO4Ib72aumhTTffJ0tvVfkSxfQOjQq8JUed8lW1UNxfTPWrlfOnB2bgD4IqszM+8gF4UWR9rJL7JrmT6uWiQ55yMvwnJeflfUQrtIchG4CfUHN/8H8wkfX+jhGfWhSdhRd7m/Dhd7KR3JaUh4PwEvaLKvNC2HM22wOm6Mtg833qEX8Dsyes3KXRk+ePlL5KuuGKfBQQAqp3dT5PtTnm7drO8vgHIy2Br+r5XPP7HGvyrYUnCRI66gakdKp1Pe6bZ2Ai4QPzvriF1UhDxnVq7X04iaLZKhWWtIJTqTjBhheh0Kgpkg3z/7ruZAmI1AOtaWMkNqy+pyOJ1P00fF4kzqhkiQycLAXUg1DZJAF/JlxarAUwXlHahq/pWuOZU9pQLuheey3GqMPckW6xwTtCAB+KuZd3nsv0+o6hq3bvBQbE3yF1o=
    postgres-password: AgBPqscSq7NyuJxJkX3cPhqFGJcz6bkZUpjM9eiXrL5i6hC3R4FXUJYsslZV8dzKigh2PZTvO53r9ltmNi5EP3C41DxdlI1u371yvKCx620R3+LcAigl3W5/CJFlZ8QD1Mo5Q2Qhpl9NfnedMnRTmMahKOX+o3agyX3n9Ed2iHKoGJUnXgWuU6Ct0U1b87oblLQuzX6uSt2+ey27TN0aMSLgUWUt0xQZoOivOhRoE0La4bnNxd2oN5uVCCyHQgH0LIeCnZb62QUPiwsmMl8MAYckEcav5PGLEhuhQtXPNo4IxMD8bcHp108F+VQ0r+vff4o4+RcIxcEbtCA4qO/7KQJABsh/qdiNyEo560kuc24omsp+aWk1u+vYB6EQT/7TCHrxmvC2PmFUSBMcGKEky64YDpLu9FUV5/coRKa3YDLgD1i+5RZtXg2o9pf0i0fVUaRxvqCg2d1cf6VP9D0OP0tTZIow9haQuq8PigTwnr+guRq9AE9cWW/a+7MYzw2gBXSAEUVU9og9HTql4okztQS6JAwShw2BErcUSNXJp0b8YapN/ocifhqjJ46gFnyv5elnDwQBHyM3k7taOcOGoJqtkaZFZ6FwDV379s/lYDR8wPJ/PUqTGvX2hZKr622yeTY+jt2bLoYriY/AO0R5vdN28FF/RZfylehujFeKvH1B0Zt79xP2G5Sb+ItaqeMzEuuF8LIAA4c/aAY=
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: keycloak
        app.kubernetes.io/name: postgresql
      name: keycloak-postgresql
      namespace: security
    type: Opaque
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: keycloak
  namespace: security
spec:
  encryptedData:
    admin-password: AgAsU81bPJDZCbaKbUAhP+p+4lkY71uT5iB5XMFJ4KnKYz3xjUd0W5me8tdAN30HI3CrrGQmlZWj2uTylpZOeJlKWG6ZLr6M9RUMR8JCKSOEVSipZtu0tJf2T+doiyY94WxkJq5ARBQr/3VBw8yUtrKIXHfQxlFgwKmI+RPpK3MohZwB4K2UeqYOzUDame9LfikyAV67mu5o2Yzt3dL13i/M/4HBnPKeGKscrQ/xJcPuXQ5qxhDLtWq5ISuWkE4e82lpuCLOcL7EyIX+gNdVqTGpIpQlUL7sKG+mVxPucE/djqq1Trv1s6570Rgs6cl7Pyt85VpaV16MVfM39HqZ71cuHIsxeeC3tiaxwwqloxKCokGeDqmob1cJIYBbusCQvRFiNMxN8/QeASHjbBUobKcEubnHYxFbEpZM/W+6QIK24Z7X0EgeoK1rpxj8SIlbjBFAKgQBJj3rvvtsEIJ+Cpe9qu3DtXdolSPBA43z/RNnamsIdmNcHWYoO7XrOwB04X/99A26rs5AOCx5FtvflMv21nF8QyPxGAAvwE1aFb/o0piUBqGekZwbDo/QMmBD3UY0YQZkCnzM/n2lgm46tu7KsqO/3KDoEEH+40bzLj0RFw4DqGUjAsoTask7PR+JtvFO9haIPRxg0TtCzbiVks6OgRWeCvy1Bbr+IeNCnrIp45KA+SSk3sLEAWKGLEkvHD0Wjy8hLTVcHXI=
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: keycloak
        app.kubernetes.io/name: keycloak
      name: keycloak
      namespace: security
    type: Opaque
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: keycloak-certificates
  namespace: security
spec:
  encryptedData:
    rootCA.crt: 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
    tls.crt: 
    tls.key: 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
  template:
    metadata:
      creationTimestamp: null
      name: keycloak-certificates
      namespace: security
    type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-env-vars
  namespace: "security"
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
data:
  KEYCLOAK_ADMIN: "admin"
  KEYCLOAK_HTTP_PORT: "8080"
  KEYCLOAK_PROXY: "passthrough"
  KEYCLOAK_ENABLE_STATISTICS: "false"
  KEYCLOAK_DATABASE_HOST: "keycloak-postgresql"
  KEYCLOAK_DATABASE_PORT: "5432"
  KEYCLOAK_DATABASE_NAME: "bitnami_keycloak"
  KEYCLOAK_DATABASE_USER: "bn_keycloak"
  KEYCLOAK_PRODUCTION:  "false"
  KEYCLOAK_ENABLE_HTTPS: "false"
  KEYCLOAK_CACHE_TYPE: "ispn"
  KEYCLOAK_CACHE_STACK: "kubernetes"
  JAVA_OPTS_APPEND: "-Djgroups.dns.query=keycloak-headless.security.svc.cluster.local"
  KEYCLOAK_LOG_OUTPUT: "default"
  KC_LOG_LEVEL: "INFO"
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-postgresql-hl
  namespace: "security"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.4.2
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: keycloak
---
# Source: keycloak/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak-postgresql
  namespace: "security"
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-headless
  namespace: "security"
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: "security"
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
spec:
  type: LoadBalancer
  externalTrafficPolicy: "Cluster"
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
---
# Source: keycloak/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak-postgresql
  namespace: "security"
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: keycloak
spec:
  replicas: 1
  serviceName: keycloak-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: keycloak
  template:
    metadata:
      name: keycloak-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: keycloak
    spec:
      serviceAccountName: default
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.2.0-debian-11-r26
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "bn_keycloak"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "bitnami_keycloak"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          persistentVolumeClaim:
            claimName: keycloak-postgresql-pvc
---
# Source: keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  namespace: "security"
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
spec:
  replicas: 1
  podManagementPolicy: Parallel
  serviceName: keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels: 
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: keycloak
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: ce8a6463849c050a0201b6af8b6faefc5d5092b79c8415c53d5a27f56e43d992
        checksum/secrets: 01098f130977b80b3779c1066ec542688885e5d119efd0728bdb48e6c989e132
      labels:
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/instance: keycloak
    spec:
      serviceAccountName: keycloak
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: keycloak
                    app.kubernetes.io/instance: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      enableServiceLinks: true
      initContainers:
          - name: wait-for-db
            image: ghcr.io/patrickdappollonio/wait-for:latest
            env:
            - name: POSTGRES_HOST
              value: "keycloak-postgresql.security.svc.cluster.local:5432"
            args:
            - --host="$(POSTGRES_HOST)"
            - --verbose
          - name: wait-for-ldap
            image: ghcr.io/patrickdappollonio/wait-for:latest
            env:
            - name: LDAP_HOST
              value: "openldap.ldap.svc.cluster.local:389"
            args:
            - --host="$(LDAP_HOST)"
            - --verbose
      containers:
        - name: keycloak
          image: docker.io/bitnami/keycloak:21.1.1-debian-11-r8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak
                  key: admin-password
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: password
            - name: KEYCLOAK_HTTP_RELATIVE_PATH
              value: "/"
            - name: X509_CA_BUNDLE
              value: "/etc/x509/https/rootCA.crt"              
          envFrom:
            - configMapRef:
                name: keycloak-env-vars
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: infinispan
              containerPort: 7800
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /realms/master
              port: http
          volumeMounts:
            - name: providers
              mountPath: /opt/bitnami/keycloak/providers
            - mountPath: /etc/x509/https/rootCA.crt
              name: root-cert
      volumes:
        - name: providers
          persistentVolumeClaim:
            claimName: keycloak-providers-pvc
        - name: root-cert
          secret:
            secretName: keycloak-certificates   
            items:
              - key: rootCA.crt
                path: rootCA.crt            