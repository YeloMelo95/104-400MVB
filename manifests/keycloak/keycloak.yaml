---
apiVersion: v1
kind: PersistentVolume
metadata: 
  name: keycloak-certificates-pv
spec: 
  capacity: 
    storage: 100Mi
  accessModes: 
    - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: longhorn
  csi:
    driver: driver.longhorn.io
    volumeHandle: keycloak-certificates
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: security
  name: keycloak-certificates-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  volumeName: keycloak-certificates-pv
  storageClassName: longhorn 
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloak
  namespace: "security"
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
automountServiceAccountToken: true
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: keycloak-postgresql
  namespace: security
spec:
  encryptedData:
    password: AgAf6XOT492PGjGPkdbHwaEgoqCGyENYtjm+uWAwI7iToyWSV44QzvxVLxSC244aUK4GnjzNrii8avc7xtG5f/bmfcxOg4Na54CZsBTRigmWug1TpVsCPTQLhd7yIzEtysyo/OyxbzI1OnnOKkkn2sUODV1NHmOyvEk06EZqi275TOjcqirVeI118PjX18GtxPZb7p0EL0Dd+/DwdJxf1l1VwoClbuPDAbZHkQ7slAaDwmhK8L87z8c63FbNZHYyXtDPHAg33Uhf/LOxG4K8g8/ngqt2DxIYO4Ib72aumhTTffJ0tvVfkSxfQOjQq8JUed8lW1UNxfTPWrlfOnB2bgD4IqszM+8gF4UWR9rJL7JrmT6uWiQ55yMvwnJeflfUQrtIchG4CfUHN/8H8wkfX+jhGfWhSdhRd7m/Dhd7KR3JaUh4PwEvaLKvNC2HM22wOm6Mtg833qEX8Dsyes3KXRk+ePlL5KuuGKfBQQAqp3dT5PtTnm7drO8vgHIy2Br+r5XPP7HGvyrYUnCRI66gakdKp1Pe6bZ2Ai4QPzvriF1UhDxnVq7X04iaLZKhWWtIJTqTjBhheh0Kgpkg3z/7ruZAmI1AOtaWMkNqy+pyOJ1P00fF4kzqhkiQycLAXUg1DZJAF/JlxarAUwXlHahq/pWuOZU9pQLuheey3GqMPckW6xwTtCAB+KuZd3nsv0+o6hq3bvBQbE3yF1o=
    postgres-password: AgBPqscSq7NyuJxJkX3cPhqFGJcz6bkZUpjM9eiXrL5i6hC3R4FXUJYsslZV8dzKigh2PZTvO53r9ltmNi5EP3C41DxdlI1u371yvKCx620R3+LcAigl3W5/CJFlZ8QD1Mo5Q2Qhpl9NfnedMnRTmMahKOX+o3agyX3n9Ed2iHKoGJUnXgWuU6Ct0U1b87oblLQuzX6uSt2+ey27TN0aMSLgUWUt0xQZoOivOhRoE0La4bnNxd2oN5uVCCyHQgH0LIeCnZb62QUPiwsmMl8MAYckEcav5PGLEhuhQtXPNo4IxMD8bcHp108F+VQ0r+vff4o4+RcIxcEbtCA4qO/7KQJABsh/qdiNyEo560kuc24omsp+aWk1u+vYB6EQT/7TCHrxmvC2PmFUSBMcGKEky64YDpLu9FUV5/coRKa3YDLgD1i+5RZtXg2o9pf0i0fVUaRxvqCg2d1cf6VP9D0OP0tTZIow9haQuq8PigTwnr+guRq9AE9cWW/a+7MYzw2gBXSAEUVU9og9HTql4okztQS6JAwShw2BErcUSNXJp0b8YapN/ocifhqjJ46gFnyv5elnDwQBHyM3k7taOcOGoJqtkaZFZ6FwDV379s/lYDR8wPJ/PUqTGvX2hZKr622yeTY+jt2bLoYriY/AO0R5vdN28FF/RZfylehujFeKvH1B0Zt79xP2G5Sb+ItaqeMzEuuF8LIAA4c/aAY=
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: keycloak
        app.kubernetes.io/name: postgresql
      name: keycloak-postgresql
      namespace: security
    type: Opaque
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: keycloak
  namespace: security
spec:
  encryptedData:
    admin-password: AgAsU81bPJDZCbaKbUAhP+p+4lkY71uT5iB5XMFJ4KnKYz3xjUd0W5me8tdAN30HI3CrrGQmlZWj2uTylpZOeJlKWG6ZLr6M9RUMR8JCKSOEVSipZtu0tJf2T+doiyY94WxkJq5ARBQr/3VBw8yUtrKIXHfQxlFgwKmI+RPpK3MohZwB4K2UeqYOzUDame9LfikyAV67mu5o2Yzt3dL13i/M/4HBnPKeGKscrQ/xJcPuXQ5qxhDLtWq5ISuWkE4e82lpuCLOcL7EyIX+gNdVqTGpIpQlUL7sKG+mVxPucE/djqq1Trv1s6570Rgs6cl7Pyt85VpaV16MVfM39HqZ71cuHIsxeeC3tiaxwwqloxKCokGeDqmob1cJIYBbusCQvRFiNMxN8/QeASHjbBUobKcEubnHYxFbEpZM/W+6QIK24Z7X0EgeoK1rpxj8SIlbjBFAKgQBJj3rvvtsEIJ+Cpe9qu3DtXdolSPBA43z/RNnamsIdmNcHWYoO7XrOwB04X/99A26rs5AOCx5FtvflMv21nF8QyPxGAAvwE1aFb/o0piUBqGekZwbDo/QMmBD3UY0YQZkCnzM/n2lgm46tu7KsqO/3KDoEEH+40bzLj0RFw4DqGUjAsoTask7PR+JtvFO9haIPRxg0TtCzbiVks6OgRWeCvy1Bbr+IeNCnrIp45KA+SSk3sLEAWKGLEkvHD0Wjy8hLTVcHXI=
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: keycloak
        app.kubernetes.io/name: keycloak
      name: keycloak
      namespace: security
    type: Opaque
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: keycloak-certificates
  namespace: security
spec:
  encryptedData:
    password: AgAayTfSC8BnoQ0nWaPvufZWeDjOMoQQgcQIvjC9K+k4ZbIvQvwByBhYXWrNa7m1Fh6xfVNL6WLrJUIb7kkbN7syzCUVQlprnnT+K/u9B06mz/KBEfit8TkigfNkpH4bT46hxhnQ29H7z6zBb0UTVIDkVtu/Dy4kuCSMdX57fxd1poBUD31n07dxxjSQc4SpgbbxegvqIuBXsZKSmaxVUaaSMOrcSoqL05mBtWZfYGSR7sBoXTh/vXLn/PlWXU4Q2wwINvjUxm9HMYPjHs3YBRh+eGUrxDixRRQ1hu1EvcT0JLyU6VNpems9WHXtlp8ZHX+CoIPSfXvouZ4wf/D+Acxx/h2283Hxd+OIXssjhrS89NkLzc+FYPyjn+az7bXMl+0qKbXVN1B8BAikLk029FKJz5PQJsaQXJNixP079OVEpdGZvHDzQ6SF0D6NEvENY5iwFJmahQm/nr8u+auWVRPXWQxQq7ZJvE78+Lm+jHGM7Q6y02LDZKfdK5R98XyChf8VLYUxA4ezwaW7PZqvICPDEU1x1T8kNPXJd7+T83dC7SPFhuKRmURV7MthIQwqUgETWJX7fZ1NQx6Trl/0Mniv1v4u1ySwG8EVtQW0Wm/gN6IJJNj7RmmOp2RguWY/dy1bNQA9gmTA1CiIKxmaj8oioPD7O/6Gq9OOCzc1O3g9bSzUfgP2TfzR6bjFUjxVL4zfpR77PXELyTU=
  template:
    metadata:
      name: keycloak-certificates
      namespace: security
    type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-env-vars
  namespace: "security"
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
data:
  KEYCLOAK_ADMIN: "admin"
  KEYCLOAK_HTTP_PORT: "8080"
  KEYCLOAK_PROXY: "passthrough"
  KEYCLOAK_ENABLE_STATISTICS: "false"
  KEYCLOAK_DATABASE_HOST: "keycloak-postgresql"
  KEYCLOAK_DATABASE_PORT: "5432"
  KEYCLOAK_DATABASE_NAME: "bitnami_keycloak"
  KEYCLOAK_DATABASE_USER: "bn_keycloak"
  # KEYCLOAK_HTTPS_KEY_STORE_FILE: /opt/bitnami/keycloak/certs/keystore.p12
  # KEYCLOAK_HTTPS_TRUST_STORE_FILE: /opt/bitnami/keycloak/certs/truststore.p12
  # KEYCLOAK_SPI_TRUSTSTORE_FILE_FILE: /opt/bitnami/keycloak/certs/truststore.p12  
  KEYCLOAK_PRODUCTION:  "false"
  KEYCLOAK_ENABLE_HTTPS: "false"
  KEYCLOAK_CACHE_TYPE: "ispn"
  KEYCLOAK_CACHE_STACK: "kubernetes"
  JAVA_OPTS_APPEND: "-Djgroups.dns.query=keycloak-headless.security.svc.cluster.local"
  KEYCLOAK_LOG_OUTPUT: "default"
  KC_LOG_LEVEL: "INFO"
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-postgresql-hl
  namespace: "security"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.4.2
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: keycloak
---
# Source: keycloak/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak-postgresql
  namespace: "security"
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-headless
  namespace: "security"
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: "security"
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
---
# Source: keycloak/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak-postgresql
  namespace: "security"
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: keycloak
spec:
  replicas: 1
  serviceName: keycloak-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: keycloak
  template:
    metadata:
      name: keycloak-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: keycloak
    spec:
      serviceAccountName: default
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.2.0-debian-11-r26
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "bn_keycloak"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "bitnami_keycloak"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: 
              cpu: "300m"
              memory: "256Mi"            
            requests:
              cpu: "250m"
              memory: "256Mi"
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          persistentVolumeClaim:
            claimName: keycloak-postgresql-pvc
---
# Source: keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  namespace: "security"
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak
spec:
  replicas: 1
  podManagementPolicy: Parallel
  serviceName: keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels: 
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: keycloak
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: ce8a6463849c050a0201b6af8b6faefc5d5092b79c8415c53d5a27f56e43d992
        checksum/secrets: 01098f130977b80b3779c1066ec542688885e5d119efd0728bdb48e6c989e132
      labels:
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/instance: keycloak
    spec:
      serviceAccountName: keycloak
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: keycloak
                    app.kubernetes.io/instance: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      enableServiceLinks: true
      initContainers:
          - name: wait-for-db
            image: ghcr.io/patrickdappollonio/wait-for:latest
            env:
            - name: POSTGRES_HOST
              value: "keycloak-postgresql.security.svc.cluster.local:5432"           
            args:
            - --host="$(POSTGRES_HOST)"
            - --verbose
          - name: wait-for-ldap
            image: ghcr.io/patrickdappollonio/wait-for:latest
            env:
            - name: LDAP_HOST
              value: "openldap.ldap.svc.cluster.local:389"
            args:
            - --host="$(LDAP_HOST)"
            - --verbose
      containers:
        - name: keycloak
          image: docker.io/bitnami/keycloak:21.1.1-debian-11-r8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
            - configMapRef:
                name: keycloak-env-vars
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak
                  key: admin-password
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: password
            - name: KEYCLOAK_HTTP_RELATIVE_PATH
              value: "/"
            # - name: KEYCLOAK_HTTPS_KEY_STORE_PASSWORD
            #   valueFrom:
            #     secretKeyRef:
            #       name: keycloak-certificates
            #       key: password
            # - name: KEYCLOAK_HTTPS_TRUST_STORE_PASSWORD
            #   valueFrom:
            #     secretKeyRef:
            #       name: keycloak-certificates
            #       key: password            
            # - name: KEYCLOAK_SPI_TRUSTSTORE_FILE_PASSWORD
            #   valueFrom:
            #     secretKeyRef:
            #       name: keycloak-certificates
            #       key: password            
          resources:
            limits:
              cpu: "1000m"
              memory: "1Gi"
            requests:
              cpu: "250m"
              memory: "256Mi"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: infinispan
              containerPort: 7800
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 75
            periodSeconds: 10
            httpGet:
              path: /
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 65
            periodSeconds: 10
            timeoutSeconds: 10
            httpGet:
              path: /realms/master
              port: http
          volumeMounts:
            - name: providers
              mountPath: /opt/bitnami/keycloak/providers
            # - mountPath: /opt/bitnami/keycloak/certs
            #   name: certificates      
      volumes:
        - name: providers
          persistentVolumeClaim:
            claimName: keycloak-providers-pvc
        # - name: certificates         
        #   persistentVolumeClaim:
        #     claimName: keycloak-certificates-pvc                 
